import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.Scanner;public class OthelloDriver {	public static void main (String [] args) throws Exception{		BufferedReader r = new BufferedReader(new InputStreamReader(System.in), 1);		Scanner scan=new Scanner(System.in);int x=0;int y=0;int mode=0;int turn=0;		Othello game = new Othello(0); //������		System.out.println("通常ルールなら1を入力・特殊ルールなら2を入力");		System.out.print("mode=");		 mode=scan.nextInt();		 if(mode==1) {		System.out.println("テスト１：Othelloクラスのオブジェクトを初期化した結果：");		printStatus(game);		printGrids(game,mode);		while(true){			System.out.println("石を置く場所(数字)をキーボードで入力してください");			//String s = r.readLine();//������̓���			System.out.print("x=");			 x=scan.nextInt();			System.out.print("y=");			 y=scan.nextInt();			 turn=game.getTurn();			System.out.println("x="+x+"y="+x+ " が入力されました。手番は " + game.getTurn() + " です。(-1=black,1=white)");            game.setStone(x, y);        	System.out.println("手番を変更します。");			printStatus(game);			printGrids(game,mode);		}		}else if(mode==2) {			game.s_generategrids(0);			System.out.println("テスト１：Othelloクラスのオブジェクトを特殊ルールで初期化した結果：");			printStatus(game);			printGrids(game,mode);			while(true){				System.out.println("石を置く場所(数字)をキーボードで入力してください");				//String s = r.readLine();//������̓���				System.out.print("x=");				 x=scan.nextInt();				System.out.print("y=");				 y=scan.nextInt();				 turn=game.getTurn();				System.out.println("x="+x+"y="+x+ " が入力されました。手番は " + game.getTurn() + " です。(-1=black,1=white)");				int event=game.s_setStone(x, y);				System.out.println("s_setStone出力"+event);				game.s_match(event,x,y);	        	System.out.println("手番を変更します。");				game.changeTurn();				printStatus(game);				printGrids(game,mode);			}		}	}	//��Ԃ�\������	public static void printStatus(Othello game){		System.out.print("checkWinner出力:" );		if(game.checkWinner()==1) {			System.out.println("White win");			System.out.println("getWhitestone出力:"+game.getWhitestone()+"\ngetBlackstone出力:"+game.getBlackstone());		}else if(game.checkWinner()==-1) {			System.out.println("black win");			System.out.println("getWhitestone出力:"+game.getWhitestone()+"\ngetBlackstone出力:"+game.getBlackstone());		}else if(game.checkWinner()==0) {			System.out.println("draw");			System.out.println("getWhitestone出力:"+game.getWhitestone()+"\ngetBlackstone出力:"+game.getBlackstone());		}else if(game.checkWinner()==10) {			System.out.println("not_finished");			System.out.println("getWhitestone出力:"+game.getWhitestone()+"\ngetBlackstone出力:"+game.getBlackstone());		}		System.out.println("isGameover出力:" + game.isGameover());		System.out.print("getTurn出力:" );		int t=game.getTurn();		System.out.print("\n" );		if(t==-1)			System.out.print(t+"(black)" );		else if(t==1)			System.out.print(t+"(white)" );	}	//�e�X�g�p�ɔՖʂ�\������	public static void printGrids(Othello game,int mode){		int[] [] grids = game.getGrids();		int row = game.getRow();		if(mode==1) {		game.checkPlaceable();		System.out.println("getRow出力:" + row);		System.out.println("Gridsテスト出力(8要素ごとに改行,△はおける場所の表示です。)");		System.out.println("　０１２３４５６７");		for(int j=0;j<8;j++) {			System.out.print(" "+j);		for(int i=0;i<8;i++) {			if(grids[j][i]==1)				System.out.print("○");				else if(grids[j][i]==-1)					System.out.print("●");				else if(grids[j][i]%10==3)					System.out.print("×");				else if(grids[j][i]%10==2)					System.out.print("△");				else if(grids[j][i]==0)					System.out.print("□");				else if(grids[j][i]/10!=0&&grids[j][i]%10==0) {					System.out.print(grids[j][i]);				}		}		System.out.println("");		}		}else if(mode==2) {			game.s_checkPlaceable();			System.out.println("getRow出力:" + row);			System.out.println("Gridsテスト出力(8要素ごとに改行△はおける場所の表示。×は設置不可、☆はイベントマスです)");			System.out.println("　０１２３４５６７");			for(int j=0;j<8;j++) {				System.out.print(" "+j);			for(int i=0;i<8;i++) {				if(grids[j][i]==1)					System.out.print("○");					else if(grids[j][i]==-1)						System.out.print("●");					else if(grids[j][i]%10==3)						System.out.print("×");					else if(grids[j][i]%10==2)						System.out.print("△");					else if(grids[j][i]==0)						System.out.print("□");					else if(grids[j][i]/10!=0&&grids[j][i]%10==0) {						System.out.print("☆");					}			}			System.out.println("");		}	}}	}